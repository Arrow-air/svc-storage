syntax = "proto3";
package grpc.flight_plan;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "svc-storage-grpc-geo_types.proto";
import "svc-storage-grpc.proto";

// Flight Status Enum
enum FlightStatus {
    // READY
    READY = 0;
    // BOARDING
    BOARDING = 1;
    // IN_FLIGHT
    IN_FLIGHT = 2;
    // FINISHED
    FINISHED = 3;
    // CANCELLED
    CANCELLED = 4;
    // DRAFT
    DRAFT = 5;
}

// Flight Priority Enum
enum FlightPriority {
    // LOW
    LOW = 0;
    // MEDIUM
    MEDIUM = 1;
    // HIGH
    HIGH = 2;
    // EMERGENCY
    EMERGENCY = 3;
}

// Response struct returning an [Object] on success and [ValidationResult] if
// invalid fields were provided
message Response {
    // struct with field -> error pairs to provide feedback about invalid fields
    grpc.ValidationResult validation_result = 1;
    // Object struct with id [`String`] in [`Uuid`](uuid::Uuid) format and [`Data`]
    // struct with flight_plan data
    optional Object object = 2;
}

// Object struct with `id` and `data` field
// * `id` [`String`] in [`Uuid`](uuid::Uuid) format
// * `data` [`Data`] struct with flight_plan data
message Object {
    // id UUID v4
    string id = 1;
    // data
    Data data = 2;
}

// UpdateObject struct with `id`, `data` and `mask` fields
// * `id` [`String`] in [`Uuid`](uuid::Uuid) format
// * `data` [`Data`] struct with flight_plan data which should be used for update
// * `mask` [`FieldMask`] struct with flight_plan fields that should be updated
message UpdateObject {
    // `id` [`String`] in [`Uuid`](uuid::Uuid) format
    string id = 1;
    // struct with flight_plan data which should be used for update
    Data data = 2;
    // struct with flight_plan fields that should be updated
    google.protobuf.FieldMask mask = 3;
}

// Data struct with flight_plan data
message Data {
    // pilot_id UUID v4
    string pilot_id = 1;
    // vehicle_id UUID v4
    string vehicle_id = 2;
    // the path of the flight
    grpc.geo_types.GeoLineString path = 3;
    // weather_conditions
    optional string weather_conditions = 4;
    // origin_vertiport_id UUID v4, only listed for get results, not needed for
    // creation (known through pad_id)
    optional string origin_vertiport_id = 5;
    // origin_vertipad_id UUID v4
    string origin_vertipad_id = 6;
    // Start of the departure vertipad timeslot
    google.protobuf.Timestamp origin_timeslot_start = 7;
    // End of the departure vertipad timeslot
    google.protobuf.Timestamp origin_timeslot_end = 8;
    // target_vertiport_id UUID v4, only listed for get results, not needed
    // for creation (known through pad_id)
    optional string target_vertiport_id = 9;
    // target_vertipad_id UUID v4
    string target_vertipad_id = 10;
    // Start of the departure vertipad timeslot
    google.protobuf.Timestamp target_timeslot_start = 11;
    // End of the departure vertipad timeslot
    google.protobuf.Timestamp target_timeslot_end = 12;
    // actual_departure_time
    optional google.protobuf.Timestamp actual_departure_time = 13;
    // actual_arrival_time
    optional google.protobuf.Timestamp actual_arrival_time = 14;
    // flight_release_approval date and time
    optional google.protobuf.Timestamp flight_release_approval = 15;
    // flight_plan_submitted date and time
    optional google.protobuf.Timestamp flight_plan_submitted = 16;
    // aircraft/pilot acknowledgement of orders pre-flight
    optional google.protobuf.Timestamp carrier_ack = 17;
    // approved_by UUID v4
    optional string approved_by = 18;
    // flight_status
    FlightStatus flight_status = 19;
    // flightPriority
    FlightPriority flight_priority = 20;
}

// Struct containing a `list` of flight_plan [Vec\<Object\>]
message List {
    // array/vector of flight items
    repeated Object list = 1;
}

// Struct used to link parcels to flight plans
message FlightPlanParcels {
    // `id` [`String`] in [`Uuid`](uuid::Uuid) format
    string id = 1;
    // parcel ids as [`Vec\<String\>`] in [`Uuid`](uuid::Uuid) format
    IdList other_id_list = 2;
    // If the parcels are picked up at the departure vertiport
    bool acquire = 3;
    // If the parcels are delivered at the destination vertiport
    bool deliver = 4;
}
