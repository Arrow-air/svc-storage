syntax = "proto3";
package grpc.flight_plan;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "svc-storage-grpc-geo_types.proto";
import "svc-storage-grpc.proto";

// Flight Status Enum
enum FlightStatus {
    // READY
    READY = 0;
    // BOARDING
    BOARDING = 1;
    // IN_FLIGHT
    IN_FLIGHT = 2;
    // FINISHED
    FINISHED = 3;
    // CANCELLED
    CANCELLED = 4;
    // DRAFT
    DRAFT = 5;
}

// Flight Priority Enum
enum FlightPriority {
    // LOW
    LOW = 0;
    // HIGH
    HIGH = 1;
    // EMERGENCY
    EMERGENCY = 2;
}

// Response struct returning an [Object] on success and [ValidationResult] if invalid fields were provided
message Response {
    // struct with field -> error pairs to provide feedback about invalid fields
    grpc.ValidationResult validation_result = 1;
    // Object struct with id [String] in [Uuid](uuid::Uuid) format and [Data] struct with flight_plan data
    optional Object object = 2;
}

// Object struct with `id` and `data` field
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with flight_plan data
message Object {
    //id UUID v4
    string id = 1;
    //data
    Data data = 2;
}

// UpdateObject struct with `id`, `data` and `mask` fields
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with flight_plan data which should be used for update
// * `mask` [FieldMask] struct with flight_plan fields that should be updated
message UpdateObject {
    // `id` [String] in [Uuid](uuid::Uuid) format
    string id = 1;
    // struct with flight_plan data which should be used for update
    Data data = 2;
    // struct with flight_plan fields that should be updated
    google.protobuf.FieldMask mask = 3;
}

// Data struct with flight_plan data
message Data {
    // pilot_id UUID v4
    string pilot_id = 1;
    // vehicle_id UUID v4
    string vehicle_id = 2;
    // cargo weight in grams per package
    repeated uint32 cargo_weight_grams = 3;
    // the path of the flight
    grpc.geo_types.GeoLineString path = 4;
    // weather_conditions
    optional string weather_conditions = 5;
    // departure_vertiport_id UUID v4, only listed for get results, not needed for creation (known through pad_id)
    optional string departure_vertiport_id = 6;
    // departure_vertipad_id UUID v4
    string departure_vertipad_id = 7;
    // destination_vertiport_id UUID v4, only listed for get results, not needed for creation (known through pad_id)
    optional string destination_vertiport_id = 8;
    // destination_vertipad_id UUID v4
    string destination_vertipad_id = 9;
    // scheduled_departure
    google.protobuf.Timestamp scheduled_departure = 10;
    // scheduled_arrival
    google.protobuf.Timestamp scheduled_arrival = 11;
    // actual_departure
    optional google.protobuf.Timestamp actual_departure = 12;
    // actual_arrival
    optional google.protobuf.Timestamp actual_arrival = 13;
    // flight_release_approval date and time
    optional google.protobuf.Timestamp flight_release_approval = 14;
    // flight_plan_submitted date and time
    optional google.protobuf.Timestamp flight_plan_submitted = 15;
    // approved_by UUID v4
    optional string approved_by = 16;
    // flight_status
    FlightStatus flight_status = 17;
    // flightPriority
    FlightPriority flight_priority = 18;
}

// Struct containing a `list` of flight_plan [Vec\<Object\>]
message List {
    // array/vector of flight items
    repeated Object list = 1;
}
