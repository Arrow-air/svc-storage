syntax = "proto3";
package grpc.group;

import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "svc-storage-grpc.proto";

// Response struct returning an [Object] on success and [ValidationResult] if invalid fields were provided
message Response {
    // struct with field -> error pairs to provide feedback about invalid fields
    grpc.ValidationResult validation_result = 1;
    // Object struct with id [String] in [Uuid](uuid::Uuid) format and [Data] struct with group data
    optional Object object = 2;
}

// Object struct with `id` and `data` field
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with group data
message Object {
    //id UUID v4
    string id = 1;
    //data
    Data data = 2;
}

// UpdateObject struct with `id`, `data` and `mask` fields
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with group data which should be used for update
// * `mask` [FieldMask] struct with group fields that should be updated
message UpdateObject {
    // `id` [String] in [Uuid](uuid::Uuid) format
    string id = 1;
    // struct with group data which should be used for update
    Data data = 2;
    // struct with group fields that should be updated
    google.protobuf.FieldMask mask = 3;
}

// Data struct with group data
message Data {
    // the Group's name
    string name = 1;
    // the Group's description
    string description = 2;
    // optional group parent UUID
    optional string parent_group_id = 3;
}

// Struct containing a `list` of group [Vec\<Object\>]
message List {
    // array/vector of group items
    repeated Object list = 1;
}

// Struct used to link users to group
message GroupUsers {
    // `id` [String] in [Uuid](uuid::Uuid) format
    string id = 1;
    // user ids as [Vec\<String\>] in [Uuid](uuid::Uuid) format
    IdList other_id_list = 2;
}
