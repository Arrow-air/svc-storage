syntax = "proto3";
package grpc.adsb.service;

import "google/protobuf/empty.proto";
import "svc-storage-grpc-adsb.proto";
import "svc-storage-grpc.proto";

// ADS-B Telemetry gRPC service
service RpcService {
    // Returns a [`tonic::Response`] containing an adsb [`Object`](super::Object)
    // Takes an [`id`](super::super::Id) to find the right record to return.
    //
    // # Errors
    //
    // Returns [`tonic::Status`] with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{AdsbClient, simple_service::Client, Id};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut client = AdsbClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match client
    //         .get_by_id(tonic::Request::new(Id { id }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE ADS-B Telemetry By ID={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_by_id(Id) returns (adsb.Object);

    // Returns a [`tonic::Response`] containing an adsb [`Response`](super::Response) object
    // of the inserted record after saving the provided adsb [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // A new UUID will be generated by the database and returned as `id` as part of the returned adsb [`Response`](super::Response).
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the [`tonic::Request`] doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use std::time::SystemTime;
    // use svc_storage_client_grpc::{AdsbClient, simple_service::Client, Id, Timestamp};
    // use svc_storage_client_grpc::adsb::{UpdateObject, Data};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut client = AdsbClient::connect("http://localhost:50051").await?;
    //
    //     let icao_address = 0x4840D6;
    //     let message_type = 4;
    //     let payload = [0; 14].to_vec();
    //     println!("Starting insert ads-b telemetry");
    //     match client
    //     .insert(tonic::Request::new(Data {
    //         icao_address,
    //         message_type,
    //         network_timestamp: Some(Timestamp::from(SystemTime::now())),
    //         payload
    //     }))
    //     .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE ADS-B Telemetry Insert={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc insert(adsb.Data) returns (adsb.Response);

    // Returns a [`tonic::Response`] containing an adsb [`Response`](super::Response) object
    // of the updated record after saving the provided adsb [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    // A field [`prost_types::FieldMask`] can be provided to restrict updates to specific fields.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Cancelled`](tonic::Code::Cancelled) if the [`Request`](tonic::Request) doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the provided Id can not be converted to a [`uuid::Uuid`].
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{AdsbClient, simple_service::Client, FieldMask, Id};
    // use svc_storage_client_grpc::adsb::{UpdateObject, Data};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut client = AdsbClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let response = match client
    //         .get_by_id(tonic::Request::new(Id { id: id.clone() }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE ADS-B Telemetry By ID={:?}", res);
    //           res
    //         },
    //         Err(e) => {
    //             return Err(Box::new(e));
    //         }
    //     };
    //
    //     let adsb = response.into_inner().data.unwrap();
    //     match client.update(tonic::Request::new(UpdateObject {
    //         id,
    //         data: Some(Data {
    //             message_type: 20,
    //             ..adsb
    //         }),
    //         mask: Some(FieldMask {
    //             paths: vec!["data.message_type".to_owned()],
    //         }),
    //     })).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE ADS-B Telemetry Update={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc update(adsb.UpdateObject) returns (adsb.Response);

    // Takes an [`Id`](super::super::Id) to set the matching adsb record as deleted in the database"
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{AdsbClient, simple_service::Client, Id};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut client = AdsbClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match client.delete(tonic::Request::new(Id{id})).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE ADS-B Telemetry Delete={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc delete(Id) returns (google.protobuf.Empty);

    // Search ads-b telemetry using an advanced filter
    //
    // This method supports paged results.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from the db search result.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{AdsbClient, simple_service::Client, AdvancedSearchFilter};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut client = AdsbClient::connect("http://localhost:50051").await?;
    //
    //     let icao_address = 0x4840D6.to_string();
    //     let filter = AdvancedSearchFilter::search_equals("icao_address".to_owned(), icao_address)
    //         .and_is_not_null("scheduled_departure".to_owned());
    //
    //     match client
    //         .search(tonic::Request::new(filter))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE ADS-B Telemetry Search={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc search(AdvancedSearchFilter) returns (adsb.List);
}
