syntax = "proto3";
package grpc.user.service;

import "google/protobuf/empty.proto";
import "svc-storage-grpc.proto";
import "svc-storage-grpc-user.proto";
import "svc-storage-grpc-group.proto";

service RpcGroupLink {
    // Link provided list `other_id_list` (group_ids) with the provided user `id`.
    // Will only add/ update entries and not delete existing ones that aren't present in the provided `other_id_list` vector
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the user id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::IdList;
    // use svc_storage_client_grpc::UserGroupLinkClient;
    // use svc_storage_client_grpc::user::UserGroups;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = UserGroupLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let other_id_list = Some( IdList {
    //         ids: vec!["a5354261-075f-4bea-9f8a-b06dc3ec0cd9".to_owned()]
    //     });
    //     match link_client
    //         .link(tonic::Request::new(UserGroups { id, other_id_list }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Link={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc link(UserGroups) returns (google.protobuf.Empty);
    // Link provided list `other_id_list` (group_ids) with the provided user `id`.
    // Same as link_groups, but will delete existing entries first.
    // Will delete existing entries first and then add the new ones present in the provided `other_id_list` vector
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the user id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::IdList;
    // use svc_storage_client_grpc::UserGroupLinkClient;
    // use svc_storage_client_grpc::user::UserGroups;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = UserGroupLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let other_id_list = Some( IdList {
    //         ids: vec!["a5354261-075f-4bea-9f8a-b06dc3ec0cd9".to_owned()]
    //     });
    //     match link_client
    //         .replace_linked(tonic::Request::new(UserGroups { id, other_id_list }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Replace Linked={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc replace_linked(UserGroups) returns (google.protobuf.Empty);
    // Remove all linked entries for the provided user `id`.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the user id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::Id;
    // use svc_storage_client_grpc::UserGroupLinkClient;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = UserGroupLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = Id { id: "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned() };
    //     match link_client
    //         .unlink(tonic::Request::new(id))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Unlink={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc unlink(Id) returns (google.protobuf.Empty);
    // Get all the group_ids that are linked to the provided user `id`.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the user id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::Id;
    // use svc_storage_client_grpc::UserGroupLinkClient;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = UserGroupLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = Id { id: "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned() };
    //     match link_client
    //         .get_linked_ids(tonic::Request::new(id))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Get Linked Ids={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_linked_ids(grpc.Id) returns (IdList);
    // Get all the group_ids that are linked to the provided user `id`.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the user id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::Id;
    // use svc_storage_client_grpc::UserGroupLinkClient;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = UserGroupLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = Id { id: "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned() };
    //     match link_client
    //         .get_linked(tonic::Request::new(id))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Get Linked={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_linked(grpc.Id) returns (grpc.group.List);
}

// User gRPC service
service RpcService {
    // Returns a [`tonic::Response`] containing an user [`Object`](super::Object)
    // Takes an [`id`](super::super::Id) to find the right record to return.
    //
    // # Errors
    //
    // Returns [`tonic::Status`] with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{Id, UserClient, simple_service::Client};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut user_client = UserClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match user_client
    //         .get_by_id(tonic::Request::new(Id { id }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User By ID={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_by_id(grpc.Id) returns (grpc.user.Object);

    // Returns a [`tonic::Response`] containing a user [`Response`](super::Response) object
    // of the inserted record after saving the provided user [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // A new UUID will be generated by the database and returned as `id` as part of the returned user [`Response`](super::Response).
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the [`tonic::Request`] doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{Id, UserClient, simple_service::Client};
    // use svc_storage_client_grpc::user::{AuthMethod, Data};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut user_client = UserClient::connect("http://localhost:50051").await?;
    //
    //     println!("Starting insert user");
    //     match user_client
    //     .insert(tonic::Request::new(Data {
    //         auth_method: AuthMethod::OauthGoogle;
    //         display_name: "John Doe".to_owned(),
    //     }))
    //     .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Insert={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc insert(grpc.user.Data) returns (grpc.user.Response);

    // Returns a [`tonic::Response`] containing a user [`Response`](super::Response) object
    // of the updated record after saving the provided user [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    // A field [`prost_types::FieldMask`] can be provided to restrict updates to specific fields.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Cancelled`](tonic::Code::Cancelled) if the [`Request`](tonic::Request) doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the provided Id can not be converted to a [`uuid::Uuid`].
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{FieldMask, Id, UserClient, simple_service::Client};
    // use svc_storage_client_grpc::user::{Data, UpdateObject};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut user_client = UserClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let response = match user_client
    //         .get_by_id(tonic::Request::new(Id { id: id.clone() }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User By ID={:?}", res);
    //           res
    //         },
    //         Err(e) => {
    //             return Err(Box::new(e));
    //         }
    //     };
    //
    //     let user = response.into_inner().data.unwrap();
    //     match user_client.update(tonic::Request::new(UpdateObject {
    //         id,
    //         data: Some(Data {
    //             display_name: "Alice".to_owned(),
    //             ..user
    //         }),
    //         mask: Some(FieldMask {
    //             paths: vec!["data.display_name".to_owned()],
    //         }),
    //     })).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Update={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc update(grpc.user.UpdateObject) returns (grpc.user.Response);

    // Takes an [`Id`](super::super::Id) to set the matching user record as deleted in the database"
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{Id, UserClient, simple_service::Client};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut user_client = UserClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match user_client.delete(tonic::Request::new(Id{id})).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Delete={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc delete(grpc.Id) returns (google.protobuf.Empty);

    // Search users using an advanced filter
    //
    // This method supports paged results.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from the db search result.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{AdvancedSearchFilter, UserClient, simple_service::Client};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut user_client = UserClient::connect("http://localhost:50051").await?;
    //
    //     let filter = AdvancedSearchFilter::search_ilike("display_name".to_owned(), "John".to_owned());
    //
    //     match user_client
    //         .search(tonic::Request::new(filter))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE User Search={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc search(grpc.AdvancedSearchFilter) returns (grpc.user.List);
}
