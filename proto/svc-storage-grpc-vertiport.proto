syntax = "proto3";
package grpc.vertiport;

import "google/protobuf/field_mask.proto";
import "svc-storage-grpc.proto";

// Response struct returning an [Object] on success and [ValidationResult] if invalid fields were provided
message Response {
    // struct with field -> error pairs to provide feedback about invalid fields
    grpc.ValidationResult validation_result = 1;
    // Object struct with id [String] in [Uuid](uuid::Uuid) format and [Data] struct with vertiport data
    optional Object object = 2;
}

// Object struct with `id` and `data` field
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with vertiport data
message Object {
    //id UUID v4
    string id = 1;
    //data
    Data data = 2;
}

// UpdateObject struct with `id`, `data` and `mask` fields
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with vertiport data which should be used for update
// * `mask` [FieldMask] struct with vertiport fields that should be updated
message UpdateObject {
    // `id` [String] in [Uuid](uuid::Uuid) format
    string id = 1;
    // struct with vertiport data which should be used for update
    Data data = 2;
    // struct with vertiport fields that should be updated
    google.protobuf.FieldMask mask = 3;
}

// Data struct with vertiport data
message Data {
    // human readable name of the vertiport
    string name = 1;
    // additional description of the vertiport
    string description = 2;
    // vertipad latitude location
    double latitude = 3;
    // vertipad longitude location
    double longitude = 4;
    // RRULE data string to indicate the vertipad's opening days and hours
    optional string schedule = 5;
}

// Struct containing a `list` of vertiport [Vec\<Object\>]
message List {
    // array/vector of vertiport items
    repeated Object list = 1;
}
