syntax = "proto3";
package grpc.vertiport;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "svc-storage-grpc.proto";

// Vertiport gRPC service
service RpcService {
    // Search vertiports using a simple filter
    // This function will be deprecated soon, please use `search` instead
    rpc get_all_with_filter(grpc.SearchFilter) returns (List);

    // Returns a [`tonic::Response`] containing an vertiport [`Object`](super::Object)
    // Takes an [`id`](super::super::Id) to find the right record to return.
    //
    // # Errors
    //
    // Returns [`tonic::Status`] with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::client::Id;
    // use svc_storage_client_grpc::VertiportClient;
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut vertiport_client = VertiportClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match vertiport_client
    //         .get_by_id(tonic::Request::new(Id { id }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Vertiport By ID={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_by_id(grpc.Id) returns (Object);

    // Returns a [`tonic::Response`] containing a vertiport [`Response`](super::Response) object
    // of the inserted record after saving the provided vertiport [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // A new UUID will be generated by the database and returned as `id` as part of the returned vertiport [`Response`](super::Response).
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the [`tonic::Request`] doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::client::Id;
    // use svc_storage_client_grpc::VertiportClient;
    // use svc_storage_client_grpc::vertiport::Data;
    //
    // const CAL_WORKDAYS_8AM_6PM: &str = "\
    // DTSTART:20221020T180000Z;DURATION:PT14H
    // RRULE:FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR
    // DTSTART:20221022T000000Z;DURATION:PT24H
    // RRULE:FREQ=WEEKLY;BYDAY=SA,SU";
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut vertiport_client = VertiportClient::connect("http://localhost:50051").await?;
    //
    //     let departure_vertipad_id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let destination_vertipad_id = "db67da52-2280-4316-8b29-9cf1bff65931".to_owned();
    //     println!("Starting insert vertiport");
    //     match vertiport_client
    //     .insert(tonic::Request::new(Data {
    //         name: "My favorite port".to_owned(),
    //         description: "Open during workdays and work hours only".to_owned(),
    //         latitude: -122.4194,
    //         longitude: 37.7746,
    //         schedule: Some(CAL_WORKDAYS_8AM_6PM.to_owned()),
    //     }))
    //     .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Vertiport Insert={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc insert(Data) returns (Response);

    // Returns a [`tonic::Response`] containing a vertiport [`Response`](super::Response) object
    // of the updated record after saving the provided vertiport [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    // A field [`prost_types::FieldMask`] can be provided to restrict updates to specific fields.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Cancelled`](tonic::Code::Cancelled) if the [`Request`](tonic::Request) doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the provided Id can not be converted to a [`uuid::Uuid`].
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::client::{ Id };
    // use svc_storage_client_grpc::FieldMask;
    // use svc_storage_client_grpc::VertiportClient;
    // use svc_storage_client_grpc::vertiport::{Data, UpdateObject};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut vertiport_client = VertiportClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let response = match vertiport_client
    //         .get_by_id(tonic::Request::new(Id { id: id.clone() }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Vertiport By ID={:?}", res);
    //           res
    //         },
    //         Err(e) => {
    //             return Err(Box::new(e));
    //         }
    //     };
    //
    //     let vertiport = response.into_inner().data.unwrap();
    //     match vertiport_client.update(tonic::Request::new(UpdateObject {
    //         id,
    //         data: Some(Data {
    //             name: "My less favorite port".to_owned(),
    //             ..vertiport
    //         }),
    //         mask: Some(FieldMask {
    //             paths: vec!["data.name".to_owned()],
    //         }),
    //     })).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Vertiport Update={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc update(UpdateObject) returns (Response);

    // Takes an [`Id`](super::super::Id) to set the matching vertiport record as deleted in the database"
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::client::Id;
    // use svc_storage_client_grpc::VertiportClient;
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut vertiport_client = VertiportClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match vertiport_client.delete(tonic::Request::new(Id{id})).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Vertiport Delete={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc delete(grpc.Id) returns (google.protobuf.Empty);

    // Search vertiports using an advanced filter
    //
    // This method supports paged results.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from the db search result.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::VertiportClient;
    // use svc_storage_client_grpc::client::AdvancedSearchFilter;
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut vertiport_client = VertiportClient::connect("http://localhost:50051").await?;
    //
    //     let filter = AdvancedSearchFilter::search_between("latitude".to_owned(), (-100).to_string(), (-125).to_string());
    //
    //     match vertiport_client
    //         .search(tonic::Request::new(filter))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Vertiport Search={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc search(grpc.AdvancedSearchFilter) returns (List);
}

// Response struct returning an [Object] on success and [ValidationResult] if invalid fields were provided
message Response {
    // struct with field -> error pairs to provide feedback about invalid fields
    grpc.ValidationResult validation_result = 1;
    // Object struct with id [String] in [Uuid](uuid::Uuid) format and [Data] struct with vertiport data
    optional Object object = 2;
}

// Object struct with `id` and `data` field
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with vertiport data
message Object {
    //id UUID v4
    string id = 1;
    //data
    Data data = 2;
}

// UpdateObject struct with `id`, `data` and `mask` fields
// * `id` [String] in [Uuid](uuid::Uuid) format
// * `data` [Data] struct with vertiport data which should be used for update
// * `mask` [FieldMask] struct with vertiport fields that should be updated
message UpdateObject {
    // `id` [String] in [Uuid](uuid::Uuid) format
    string id = 1;
    // struct with vertiport data which should be used for update
    Data data = 2;
    // struct with vertiport fields that should be updated
    google.protobuf.FieldMask mask = 3;
}

// Data struct with vertiport data
message Data {
    // human readable name of the vertiport
    string name = 1;
    // additional description of the vertiport
    string description = 2;
    // vertipad latitude location
    double latitude = 3;
    // vertipad longitude location
    double longitude = 4;
    // RRULE data string to indicate the vertipad's opening days and hours
    optional string schedule = 5;
}

// Struct containing a `list` of vertiport [Vec\<Object\>]
message List {
    // array/vector of vertiport items
    repeated Object list = 1;
}
