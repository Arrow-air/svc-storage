syntax = "proto3";
package grpc.itinerary.service;

import "google/protobuf/empty.proto";
import "svc-storage-grpc-itinerary.proto";
import "svc-storage-grpc-flight_plan.proto";
import "svc-storage-grpc.proto";

service RpcFlightPlanLink {
    // Link provided list `other_id_list` (flight_plan_ids) with the provided itinerary `id`.
    // Will only add/ update entries and not delete existing ones that aren't present in the provided `other_id_list` vector
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the itinerary id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::IdList;
    // use svc_storage_client_grpc::ItineraryFlightPlanLinkClient;
    // use svc_storage_client_grpc::itinerary::ItineraryFlightPlans;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = ItineraryFlightPlanLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let other_id_list = Some( IdList {
    //         ids: vec!["a5354261-075f-4bea-9f8a-b06dc3ec0cd9".to_owned()]
    //     });
    //     match link_client
    //         .link(tonic::Request::new(ItineraryFlightPlans { id, other_id_list }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Link={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc link(ItineraryFlightPlans) returns (google.protobuf.Empty);
    // Link provided list `other_id_list` (flight_plan_ids) with the provided itinerary `id`.
    // Will delete existing entries first and then add the new ones present in the provided `other_id_list` vector
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the itinerary id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::IdList;
    // use svc_storage_client_grpc::ItineraryFlightPlanLinkClient;
    // use svc_storage_client_grpc::itinerary::ItineraryFlightPlans;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = ItineraryFlightPlanLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let other_id_list = Some( IdList {
    //         ids: vec!["a5354261-075f-4bea-9f8a-b06dc3ec0cd9".to_owned()]
    //     });
    //     match link_client
    //         .replace_linked(tonic::Request::new(ItineraryFlightPlans { id, other_id_list }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Replace Linked={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc replace_linked(ItineraryFlightPlans) returns (google.protobuf.Empty);
    // Remove all linked entries for the provided itinerary `id`.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the itinerary id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::Id;
    // use svc_storage_client_grpc::ItineraryFlightPlanLinkClient;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = ItineraryFlightPlanLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = Id { id: "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned() };
    //     match link_client
    //         .unlink(tonic::Request::new(id))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Unlink={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc unlink(Id) returns (google.protobuf.Empty);
    // Get all the flight_plan_ids that are linked to the provided itinerary `id`.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the itinerary id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::Id;
    // use svc_storage_client_grpc::ItineraryFlightPlanLinkClient;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = ItineraryFlightPlanLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = Id { id: "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned() };
    //     match link_client
    //         .get_linked_ids(tonic::Request::new(id))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Get Linked Ids={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_linked_ids(grpc.Id) returns (IdList);
    // Get all the flight_plan_ids that are linked to the provided itinerary `id`.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if the itinerary id does not match a record in the db.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::Id;
    // use svc_storage_client_grpc::ItineraryFlightPlanLinkClient;
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut link_client = ItineraryFlightPlanLinkClient::connect("http://localhost:50051").await?;
    //
    //     let id = Id { id: "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned() };
    //     match link_client
    //         .get_linked(tonic::Request::new(id))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Get Linked={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_linked(grpc.Id) returns (grpc.flight_plan.List);

    // Simple ready check to allow callers to validate the client connection status.
    rpc is_ready (ReadyRequest) returns (ReadyResponse);
}

// Itinerary gRPC service
service RpcService {
    // Returns a [`tonic::Response`] containing an itinerary [`Object`](super::Object)
    // Takes an [`id`](super::super::Id) to find the right record to return.
    //
    // # Errors
    //
    // Returns [`tonic::Status`] with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{Id, ItineraryClient, simple_service::Client};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut itinerary_client = ItineraryClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match itinerary_client
    //         .get_by_id(tonic::Request::new(Id { id }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary By ID={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc get_by_id(grpc.Id) returns (Object);

    // Returns a [`tonic::Response`] containing a itinerary [`Response`](super::Response) object
    // of the inserted record after saving the provided itinerary [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // A new UUID will be generated by the database and returned as `id` as part of the returned itinerary [`Response`](super::Response).
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the [`tonic::Request`] doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{Id, ItineraryClient, simple_service::Client};
    // use svc_storage_client_grpc::itinerary::{Data, ItineraryStatus};
    // use std::time::SystemTime;
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut itinerary_client = ItineraryClient::connect("http://localhost:50051").await?;
    //
    //     let user_id = "62fb5d13-2cfe-45e2-b89a-16205d15e811".to_owned();
    //     println!("Starting insert itinerary");
    //     match itinerary_client
    //     .insert(tonic::Request::new(Data {
    //         user_id,
    //         status: ItineraryStatus::Active as i32
    //     }))
    //     .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Insert={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc insert(Data) returns (Response);

    // Returns a [`tonic::Response`] containing a itinerary [`Response`](super::Response) object
    // of the updated record after saving the provided itinerary [`Data`](super::Data)
    //
    // The given data will be validated before insert.
    // Any errors found during validation will be added to the [`ValidationResult`](super::super::ValidationResult).
    // A field [`prost_types::FieldMask`] can be provided to restrict updates to specific fields.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Cancelled`](tonic::Code::Cancelled) if the [`Request`](tonic::Request) doesn't contain any data.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the provided Id can not be converted to a [`uuid::Uuid`].
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{FieldMask, Id, ItineraryClient, simple_service::Client};
    // use svc_storage_client_grpc::itinerary::{Data, UpdateObject};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut itinerary_client = ItineraryClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     let response = match itinerary_client
    //         .get_by_id(tonic::Request::new(Id { id: id.clone() }))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary By ID={:?}", res);
    //           res
    //         },
    //         Err(e) => {
    //             return Err(Box::new(e));
    //         }
    //     };
    //
    //     let itinerary = response.into_inner().data.unwrap();
    //     match itinerary_client.update(tonic::Request::new(UpdateObject {
    //         id,
    //         data: Some(Data {
    //             ..itinerary
    //         }),
    //         mask: Some(FieldMask {
    //             paths: vec!["data.user_id".to_owned()],
    //         }),
    //     })).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Update={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc update(UpdateObject) returns (Response);

    // Takes an [`Id`](super::super::Id) to set the matching itinerary record as deleted in the database"
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::NotFound`](tonic::Code::NotFound) if no record is returned from the database.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from a db call.
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{Id, ItineraryClient, simple_service::Client};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut itinerary_client = ItineraryClient::connect("http://localhost:50051").await?;
    //
    //     let id = "53acfe06-dd9b-42e8-8cb4-12a2fb2fa693".to_owned();
    //     match itinerary_client.delete(tonic::Request::new(Id{id})).await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Delete={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc delete(grpc.Id) returns (google.protobuf.Empty);

    // Search itineraries using an advanced filter
    //
    // This method supports paged results.
    //
    // # Errors
    //
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if any error is returned from the db search result.
    // Returns [`Status`](tonic::Status) with [`Code::Internal`](tonic::Code::Internal) if the resulting Vec<tokio_postgres::Row> data could not be converted into [`List`](super::List).
    //
    // # Examples
    // ```
    // use svc_storage_client_grpc::{AdvancedSearchFilter, ItineraryClient, simple_service::Client};
    //
    // async fn example () -> Result<(), Box<dyn std::error::Error>> {
    //     let mut itinerary_client = ItineraryClient::connect("http://localhost:50051").await?;
    //
    //     let user_id = "a2093c5e-9bbe-4f0f-97ee-276b43fa3759".to_owned();
    //     let filter = AdvancedSearchFilter::search_equals("user_id".to_owned(), user_id);
    //
    //     match itinerary_client
    //         .search(tonic::Request::new(filter))
    //         .await
    //     {
    //         Ok(res) => {
    //           println!("RESPONSE Itinerary Search={:?}", res);
    //           Ok(())
    //         },
    //         Err(e) => Err(Box::new(e))
    //     }
    // }
    // ```
    rpc search(grpc.AdvancedSearchFilter) returns (List);

    // Simple ready check to allow callers to validate the client connection status.
    rpc is_ready (ReadyRequest) returns (ReadyResponse);
}
