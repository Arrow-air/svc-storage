syntax = "proto3";
package grpc;

import "google/protobuf/timestamp.proto";

//Storage service
service StorageRpc {
    rpc isReady (ReadyRequest) returns (ReadyResponse);
    rpc aircrafts(AircraftFilter) returns (Aircrafts);
    rpc aircraft_by_id(Id) returns (Aircraft);
    rpc flight_plans(FlightPlanFilter) returns (FlightPlans);
    rpc flight_plan_by_id(Id) returns (FlightPlan);
    rpc pilots(PilotFilter) returns (Pilots);
    rpc pilot_by_id(Id) returns (Pilot);
    rpc vertiports(VertiportFilter) returns (Vertiports);
    rpc vertiport_by_id(Id) returns (Vertiport);
    rpc insert_flight_plan(FlightPlan) returns (FlightPlan);
    rpc update_flight_plan_by_id(FlightPlan) returns (FlightPlan);
    //rpc delete_flight_plan_by_id(id: Id)
}

//Id type for passing id only requests
message Id{
    //id
    uint32 id = 1;
}

// Ready Request
message ReadyRequest {
    // No arguments
}

// Ready Response
message ReadyResponse {
    // ready
    bool ready = 1;
}

//Flight Status Enum
enum FlightStatus{
    //READY
    READY = 0;
    //BOARDING
    BOARDING = 1;
    //IN_FLIGHT
    IN_FLIGHT = 3;
    //FINISHED
    FINISHED = 4;
    //CANCELLED
    CANCELLED = 5;
    //DRAFT
    DRAFT = 6;
}
//Flight Priority Enum
enum FlightPriority{
    //LOW
    LOW = 0;
    //HIGH
    HIGH = 1;
    //EMERGENCY
    EMERGENCY = 2;
}

//FlightPlan
message FlightPlan {
    //id of the flight
    uint32 id = 1;
    /*//pilot_id
    uint32 pilot_id = 2;
    //aircraft_id
    uint32 aircraft_id = 3;
    //cargo
    repeated uint32 cargo = 4;
    //weather_conditions
    string weather_conditions = 5;
    //vertiport_id_departure
    uint32 vertiport_id_departure = 6;
    //pad_id_departure
    uint32 pad_id_departure = 7;
    //vertiport_id_destination
    uint32 vertiport_id_destination = 8;
    //pad_id_destination
    uint32 pad_id_destination = 9;
    //estimated_departure
    google.protobuf.Timestamp estimated_departure = 10;
    //estimated_arrival
    google.protobuf.Timestamp estimated_arrival = 11;
    //actual_departure
    optional google.protobuf.Timestamp actual_departure = 12;
    //actual_arrival
    optional google.protobuf.Timestamp actual_arrival = 13;
    //flight_release_approval
    optional google.protobuf.Timestamp flight_release_approval = 14;
    //flight_plan_submitted
    optional google.protobuf.Timestamp flight_plan_submitted = 15;*/
    //flightStatus
    FlightStatus flightStatus = 16;
    //flightPriority
    //FlightPriority flightPriority = 17;

}

//FlightPlans
message FlightPlans {
    //array/vector of flight items
    repeated FlightPlan flightPlans = 1;
}

//FlightPlans
message FlightPlanFilter {
    //todo add filter parameters
}


//Aircraft
message Aircraft {
    //id
    uint32 id = 1;
    //string make = 2;
    //string model = 3;
    string nickname = 4;
    //uint32 passenger_capacity = 5;
    //google.protobuf.Timestamp end_lifespan = 6;
    //google.protobuf.Timestamp next_maintenance = 7;
    //google.protobuf.Timestamp last_maintenance = 8;
    //google.protobuf.Timestamp last_location_update = 9;
    //float last_location_latitude = 10;
    //float last_location_longitude = 11;
    //float voltage_x = 12;
    //float voltage_y = 13;
    //float amperage_x = 14;
    //float amperage_y = 15;
}
//Aircrafts
message Aircrafts {
    //array/vector of flight items
    repeated Aircraft aircrafts = 1;
}
//AircraftFilter
message AircraftFilter {
    //todo add filter parameters
}
//Vertiport
message Vertiport {
    uint32 id = 1;
    string label = 2;
    float latitude = 3;
    float longitude = 4;
    //repeated uint32 engineers = 5;
    repeated uint32 pads = 6;
    //uint32 elevation = 7;
}
//Vertiports
message Vertiports {
    repeated Vertiport vertiports = 1;
}
//VertiportFilter
message VertiportFilter {
    //todo add filter parameters
}
//Pad
message Pad {
    uint32 id = 1;
    //bool enabled = 2;
    //bool charging_enabled = 3;
    //float charging_rate_kw = 4;
    //string restrictions = 5;
    float latitude = 6;
    float longitude = 7;
    bool parked = 8;
}
//Pads
message Pads {
    repeated Pad pads = 1;
}
//PadFilter
message PadFilter {
    //todo add filter parameters
}

//Pilot
message Pilot {
    uint32 id = 1;
    string first_name = 2;
    string last_name = 3;
    /*string wallet_address = 4;
    string type = 5;*/
}
//Pilots
message Pilots {
    repeated Pilot pilots = 1;
}
//PilotFilter
message PilotFilter {
    //todo add filter parameters
}
